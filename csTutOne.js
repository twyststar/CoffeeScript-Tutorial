// Generated by CoffeeScript 1.12.7

/*
 Conditionals line 231
 Existentials line 283
 Arrays line 301
 Loops line 361
 Functions line 423
 Objects line 466
 Classes line 489
 */


/* You compile to a JS file with the same name but the js extension with
 coffee --compile cstut.coffee
To auto compile use this in the terminal    coffee -wc *.coffee
 */

(function() {
  var Animal, Dog, csOutput, lorelai, name, sparky,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  name = "Bob";

  csOutput = document.getElementById("csoutput");

  csOutput.innerHTML = "Hello " + name + " <br>";

  Animal = (function() {
    Animal.prototype.name = "No Name";

    Animal.prototype.height = 0;

    Animal.prototype.weight = 0;

    Animal.prototype.sound = "No Sound";

    Animal.numOfAnimals = 0;

    Animal.getNumOfAnimals = function() {
      return Animal.numOfAnimals;
    };

    function Animal(name, height1, weight1) {
      if (name == null) {
        name = "No Name";
      }
      this.height = height1 != null ? height1 : 0;
      this.weight = weight1 != null ? weight1 : 0;
      this.name = name;
      Animal.numOfAnimals++;
    }

    Animal.prototype.makeSound = function() {
      return "says " + this.sound;
    };

    Animal.prototype.getInfo = function() {
      return this.name + " is " + this.height + " in and weighs " + this.weight + " lb and " + (this.makeSound());
    };

    return Animal;

  })();

  lorelai = new Animal();

  lorelai.name = "Lorelai";

  lorelai.height = 12;

  lorelai.weight = 12;

  lorelai.sound = "Mwraw!";

  csOutput.insertAdjacentHTML('beforeend', (lorelai.getInfo()) + "<br>");

  Animal.prototype.isItBig = function() {
    if (this.height >= 24) {
      return "yes";
    } else if (this.height < 24 && this.weight > this.height / 2) {
      return "Not big, but a little hefty.";
    } else {
      return "no";
    }
  };

  csOutput.insertAdjacentHTML('beforeend', "Is Lorelai big? " + (lorelai.isItBig()) + "<br>");

  csOutput.insertAdjacentHTML('beforeend', "Number of animals: " + (Animal.getNumOfAnimals()) + "<br>");


  /*
  I'd like to figure out how to save an array of all objects in a class, and cycle through them, like Ruby .all and .each class methods.
   */

  Dog = (function(superClass) {
    extend(Dog, superClass);

    Dog.prototype.sound2 = "No Sound";

    function Dog(name, height, weight) {
      if (name == null) {
        name = "No Name";
      }
      if (height == null) {
        height = 0;
      }
      if (weight == null) {
        weight = 0;
      }
      Dog.__super__.constructor.call(this, name, height, weight);
    }

    Dog.prototype.makeSound = function() {
      return Dog.__super__.makeSound.apply(this, arguments) + (" and " + this.sound2);
    };

    return Dog;

  })(Animal);

  sparky = new Dog("Sparky");

  sparky.height = 36;

  sparky.weight = 98;

  sparky.sound = "Wooof!";

  sparky.sound2 = "Grrrrr";

  csOutput.insertAdjacentHTML('beforeend', (sparky.getInfo()) + "<br>");

  csOutput.insertAdjacentHTML('beforeend', "Is sparky big? " + (sparky.isItBig()) + "<br>");

}).call(this);
